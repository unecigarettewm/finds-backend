// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstname  String
  username   String?   @unique
  password   String // saved as one way hash
  finds      Find[]
  avatar     String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  saves      Save[]
  bio        String?
}

model Find {
  id         Int       @id @default(autoincrement())
  review     String
  rating     Rating    @relation(fields: [ratingId], references: [id])
  ratingId   Int
  published  Boolean?  @default(false)
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int
  images     String[]  @default([])
  place      Place?    @relation(fields: [placeId], references: [id])
  placeId    Int
  saves      Save[]
  findTags   FindTag[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Place {
  id              Int       @id @default(autoincrement())
  google_place_id String    @unique
  name            String
  address         String
  google_maps_uri String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  finds           Find[]
}

model Save {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  find       Find?     @relation(fields: [findId], references: [id])
  findId     Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  finds      FindTag[]
}

model FindTag {
  id         Int       @id @default(autoincrement())
  tag        Tag       @relation(fields: [tagId], references: [id])
  tagId      Int
  find       Find      @relation(fields: [findId], references: [id])
  findId     Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
}

model Rating {
  id         Int       @id @default(autoincrement())
  rating     String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  finds      Find[]
}
